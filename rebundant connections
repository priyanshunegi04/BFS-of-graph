   
   bool dfs(int node, int parent, vector<vector<int>>& adj, vector<bool> &vis){
  
       vis[node] = true;
      for(auto it:adj[node]){
        if(!vis[it]){
           if(dfs(it, node, adj, vis))return true;
      }
         else if(it!=parent)return true; 
      }
      return false;
    
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
         vector<vector<int>>adj(n+1);
        vector<bool>vis(n+1, 0);
        for(int i=0; i<n; i++){
         fill(begin(vis), end(vis), 0);
            int u = edges[i][0];
            int v = edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
            
            if(dfs(u, -1, adj, vis)) return {u,v};
        }     
  return {};
    }
